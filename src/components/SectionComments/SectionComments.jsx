import React, { useEffect, useState } from 'react';

const SectionComments = () => {
  const [reviews, setReviews] = useState([]);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchReviews = async () => {
      const placeId = 'ChIJgWjrbZbP1EARk8pw9Vfl9kE';
      const apiKey = process.env.REACT_APP_GOOGLE_API_KEY;
      const proxy = 'https://corsproxy.io/?';
      const url = `https://maps.googleapis.com/maps/api/place/details/json?place_id=${placeId}&fields=name,rating,reviews&language=uk&key=${apiKey}`;
      try {
        const response = await fetch(proxy + encodeURIComponent(url));
        if (!response.ok) throw new Error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É');
        const data = await response.json();

        if (data.result?.reviews) {
          const googleReviews = data.result.reviews;

          const myReview = {
            author_name: '–¢–≤—ñ–π –∫–ª—ñ—î–Ω—Ç',
            rating: 5,
            text: '–î—É–∂–µ –∑–∞–¥–æ–≤–æ–ª–µ–Ω–∏–π —Å–ø—ñ–≤–ø—Ä–∞—Ü–µ—é! üëç –†–µ–∫–æ–º–µ–Ω–¥—É—é!',
            time: Math.floor(Date.now() / 1000),
          };

          setReviews([...googleReviews, myReview]);
        } else {
          setError('–í—ñ–¥–≥—É–∫–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ –∞–±–æ API –Ω–µ –ø–æ–≤–µ—Ä—Ç–∞—î —ó—Ö.');
        }
      } catch (err) {
        console.error(err);
        setError('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–≥—É–∫–∏.');
      }
    };

    fetchReviews();
  }, []);

  return (
    <section style={{ padding: '1.5rem', maxWidth: 600, margin: '0 auto' }}>
      <h2 style={{ fontSize: '1.5rem', marginBottom: '1rem' }}>–í—ñ–¥–≥—É–∫–∏</h2>

      {error && <p style={{ color: 'red' }}>{error}</p>}

      {reviews.length === 0 && !error ? (
        <p>–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –≤—ñ–¥–≥—É–∫—ñ–≤.</p>
      ) : (
        <ul style={{ listStyle: 'none', padding: 0 }}>
          {reviews.map((r, i) => (
            <li
              key={i}
              style={{
                background: '#f9f9f9',
                borderRadius: '12px',
                padding: '1rem',
                marginBottom: '1rem',
                boxShadow: '0 2px 5px rgba(0,0,0,0.1)',
              }}
            >
              <strong>{r.author_name}</strong> ({r.rating}‚òÖ)
              <p style={{ marginTop: '0.5rem' }}>{r.text}</p>
              <small style={{ color: '#555' }}>
                {new Date(r.time * 1000).toLocaleDateString()}
              </small>
            </li>
          ))}
        </ul>
      )}
    </section>
  );
};

export default SectionComments;
